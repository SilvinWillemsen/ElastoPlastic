%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%     finds frictional contact force as described in    %%    Dupont et al., IEEE Trans. Autom. Control (2002)   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% v=relative velocity (i.e. vel. of resonator minus vel.%%                      of bow)                          %% z=mean bristle displacement                           %% z_ss(v) = steady state displacement                   %% alpha(v,z)= elasto-plastic function                   %% y=fnl(z,v)=v*[1-alpha(v,z)*z/z_ss(v)] non-lin function%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%function [y,err,count]=nlfriction(p1,p2,y1,ssparam,z_ba,sigma,K);fc=ssparam(1);fs=ssparam(2);strv=ssparam(3);sig0=sigma(1);sig1=sigma(2);sig2=sigma(3);%%%%%%%%     Numerical details      %%%%%%%%%%%%%%%%%%%%%%%%%% K= K matrix (2x1)% p1=x-K(1)*y; p2=dotx-K(2)*y               Sheared variables% g(p1,p2,y)=fnl(p1+K(1)*y,p2+K(2)*y) -y=0  Iteratively solved%                                           with Newton-Raphson % y1=last non-lin function value            Used as starting point %                                           for Newton iteration%% At iteration #count the new estimate% y(count) is obtained via the equation% y(count)= y(count-1) -g/(dg/dy) %% NOTE: *pure* K-method would find a function y=g~(p1,p2)% starting from the implicit equation g(p1,p2,y)=0%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%Errmax=1e-7;      % error for stopping iterations y=y1;             % first estimate for contact force (uses last value)err=1;count=1;           %counter for iterationswhile(err>Errmax & count<50);   % 50= max. allowed number of iterations      v=p1+K(1)*y;      % est. for rel. velocity (according to K-method)   z=p2+K(2)*y;      % est. for bristle displac. (according to K-method)      %% compute functions %%      espon=exp(-(v/strv)^2);         %exponential function   zss=sign(v)*(fc +(fs-fc)*espon)/sig0;   %steady state curve: z_ss(v)   if v==0      zss=fs/sig0;   end         alpha=0;                  %elasto-plastic function \alpha (v,z)   if (sign(z)==sign(v))      if ( (abs(z)>z_ba)&(abs(z)<zss) )         arg=pi*(z-0.5*(zss+z_ba))/(zss-z_ba);         sinarg=sin(arg);         alpha=0.5*(1+sinarg);      elseif (abs(z)>zss)         alpha=1;      end   end      fnl=v*(1-alpha*z/zss);     %non-linear function estimate   g=fnl-y;                %Newton-Raphson function estimate      %% compute derivatives %%      dz_ss=-sign(v)*2*v/(sig0*(strv)^2) *(fs-fc)*espon;    %d(z_ss)/dv   dalpha_v=0;                     %d(alpha)/dv    dalpha_z=0;                     %d(alpha)/dz   if ( (sign(z)==sign(v))&(abs(z)>z_ba)&(abs(z)<zss) )      cosarg=cos(arg);      dalpha_v=0.5*pi*cosarg*dz_ss*(z_ba-z)/(zss-z_ba)^2;       dalpha_z=0.5*pi*cosarg/(zss-z_ba);   end      dfnl_v=1 -z*((alpha +v*dalpha_v)*zss -dz_ss*alpha*v)/zss^2; %d(f_nl)/dv   dfnl_z=-v/zss*(z*dalpha_z +alpha);               %d(f_nl)/dz      dg=dfnl_v*K(1) + dfnl_z*K(2) -1;                  %dg/dy       out = y - g/dg;           % Newton-Raphson iteration   err = abs(out-y);   y = out;      count=count+1;end